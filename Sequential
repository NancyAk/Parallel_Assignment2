#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

void sequential_sieve(int n) {
    // Allocate memory for marking numbers as prime or not
    int *is_prime = (int *)malloc((n + 1) * sizeof(int));

    // Initialize all numbers as prime candidates
    for (int i = 0; i <= n; i++) {
        is_prime[i] = 1;  // Assume all numbers are prime (1 means prime)
    }

    // 0 and 1 are not prime numbers
    is_prime[0] = is_prime[1] = 0;

    // Start the sieve process
    for (int p = 2; p * p <= n; p++) {
        if (is_prime[p]) {
            // Mark all multiples of p as non-prime
            for (int multiple = p * p; multiple <= n; multiple += p) {
                is_prime[multiple] = 0;
            }
        }
    }

    // Print all prime numbers
    printf("Primes up to %d:\n", n);
    for (int i = 2; i <= n; i++) {
        if (is_prime[i]) {
            printf("%d ", i);
        }
    }
    printf("\n");

    // Free allocated memory
    free(is_prime);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <n>\n", argv[0]);
        return EXIT_FAILURE;
    }

    int n = atoi(argv[1]);

    // Start timing the sieve algorithm
    clock_t start_time = clock();

    // Run the sequential sieve
    sequential_sieve(n);

    // End timing the sieve algorithm
    clock_t end_time = clock();
    double total_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
    printf("Total time for n = %d: %f seconds\n", n, total_time);

    return EXIT_SUCCESS;
}
